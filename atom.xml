<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>周晓柳婷的博客</title>
  
  <subtitle>积累技术，不断提高</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-12-17T03:01:14.514Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>zhouxlt/Vinnie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nodejs-project（Egg框架）</title>
    <link href="http://example.com/2020/12/15/nodejs-project/"/>
    <id>http://example.com/2020/12/15/nodejs-project/</id>
    <published>2020-12-15T07:18:12.000Z</published>
    <updated>2020-12-17T03:01:14.514Z</updated>
    
    <content type="html"><![CDATA[<p>使用nodejs在vue与java之间过渡一层，下面介绍使用nodejs搭建中间层后端项目<br>参考<a href="https://eggjs.org/zh-cn/intro/quickstart.html">eggjs官网</a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="全局安装Egg-NodeJS前端框架脚手架"><a href="#全局安装Egg-NodeJS前端框架脚手架" class="headerlink" title="全局安装Egg NodeJS前端框架脚手架"></a>全局安装Egg NodeJS前端框架脚手架</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -g egg-init</span><br></pre></td></tr></table></figure><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ egg-init &#123;projectName&#125; [--<span class="built_in">type</span>=simple]</span><br></pre></td></tr></table></figure><h3 id="进入项目安装依赖"><a href="#进入项目安装依赖" class="headerlink" title="进入项目安装依赖"></a>进入项目安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i</span><br></pre></td></tr></table></figure><h3 id="本地启动项目"><a href="#本地启动项目" class="headerlink" title="本地启动项目"></a>本地启动项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure><h3 id="安装NodeJS中间件、第三方模块和数据库"><a href="#安装NodeJS中间件、第三方模块和数据库" class="headerlink" title="安装NodeJS中间件、第三方模块和数据库"></a>安装NodeJS中间件、第三方模块和数据库</h3><blockquote><ol><li>安装mysql数据库使用</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -s egg-mysql</span><br><span class="line"><span class="comment"># 若线上环境没用到mysql数据库，则不要配置下列项，启动加载时会找不到而报错</span></span><br><span class="line">$ 在config/plugin.js里声明插件</span><br><span class="line">exports.mysql = &#123;</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span>,</span><br><span class="line">  package: <span class="string">&#x27;egg-mysql&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">$ 在config/config.default.js里配置</span><br><span class="line">config.mysql = &#123;</span><br><span class="line">  <span class="comment"># 单数据库信息配置</span></span><br><span class="line">  client: &#123;</span><br><span class="line">    host: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    port: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">    user: <span class="string">&#x27;****&#x27;</span>,</span><br><span class="line">    password: <span class="string">&#x27;*******&#x27;</span>,</span><br><span class="line">    database: <span class="string">&#x27;egg&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment"># 是否加载到 app 上，默认开启</span></span><br><span class="line">  app: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment"># 是否加载到 agent 上，默认关闭</span></span><br><span class="line">  agent: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="开发应用模式"><a href="#开发应用模式" class="headerlink" title="开发应用模式"></a>开发应用模式</h2><h3 id="请求响应模式"><a href="#请求响应模式" class="headerlink" title="请求响应模式"></a>请求响应模式</h3><p>Router -&gt; Controller -&gt; Service -&gt; MySQL</p><blockquote><ol><li>Router路由</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/email&#x27;</span>, controller.email.getEmails);</span><br></pre></td></tr></table></figure><p>controller.email的email是app/controller文件夹下的email.js文件，<br>email.js中的controller类必须导出才能使用（module.exports = EmailController;）<br>controller.email.getEmails中的getEmails是email.js文件类中的一个方法<br>当前端访问到该路由时，就是调用emailjs勒种的getEmails方法  </p><blockquote><ol start="2"><li>Controller控制器</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">getEmails</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> ctx = <span class="built_in">this</span>.ctx;</span><br><span class="line">  <span class="keyword">const</span> emails = <span class="keyword">await</span> ctx.service.email.getEmails();</span><br><span class="line">  ctx.body = emails;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在controller的getEmails方法中通过ctx调用service<br>ctx.service.email的email是app/service文件夹下的email.js文件，<br>email.js中的service类必须导出才能被调用（module.exports = EmailService;）<br>ctx.service.email.getEmails()中的getEmails是文件类中的一个方法<br>当路由调用到controller类方法，在controller方法中会调用service类的方法  </p><blockquote><ol start="3"><li>Service服务</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">getEmails</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> sql = <span class="string">&#x27;select accountId from email&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> emails = <span class="keyword">await</span> <span class="built_in">this</span>.app.mysql.query(sql);</span><br><span class="line">  <span class="keyword">return</span> emails;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在service的getEmails方法中通过this.app调用mysql<br>await this.app.mysql.query(sql)异步调用mysql的查询sql语句，查询数据库  </p><p>获取数据return到controller，controller将其赋给ctx.body，前端会接收到返回数据  </p><blockquote><ol start="4"><li>MySQL数据库</li></ol></blockquote><p>通过/config/中的配置连接到环境中的数据库，运行sql语句，并将结果返回  </p><blockquote><p>controller负责与前端数据格式交互；service负责与数据库交互数据处理</p></blockquote><h3 id="自动调用（定时任务）模式"><a href="#自动调用（定时任务）模式" class="headerlink" title="自动调用（定时任务）模式"></a>自动调用（定时任务）模式</h3><p>参考文档<a href="https://eggjs.org/zh-cn/basics/schedule.html">eggjs定时任务</a></p><ol><li>app/schedule目录下建立定时任务文件send_email.js</li><li>依赖Subscription，通过 schedule 属性来设置定时任务的执行间隔等配置（interval或者cron）；<br>subscribe 是真正定时任务执行时被运行的函数</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用nodejs在vue与java之间过渡一层，下面介绍使用nodejs搭建中间层后端项目&lt;br&gt;参考&lt;a href=&quot;https://eggjs.org/zh-cn/intro/quickstart.html&quot;&gt;eggjs官网&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Quick-</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>npm和yarn常见命令</title>
    <link href="http://example.com/2020/12/10/package-management/"/>
    <id>http://example.com/2020/12/10/package-management/</id>
    <published>2020-12-10T01:33:29.000Z</published>
    <updated>2020-12-10T02:29:33.334Z</updated>
    
    <content type="html"><![CDATA[<p>npm and yarn package management common command</p><h1 id="npm和yarn命令"><a href="#npm和yarn命令" class="headerlink" title="npm和yarn命令"></a>npm和yarn命令</h1><h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm -v</span><br><span class="line">$ yarn -v</span><br></pre></td></tr></table></figure><h2 id="yarn安装"><a href="#yarn安装" class="headerlink" title="yarn安装"></a>yarn安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i yarn -g</span><br></pre></td></tr></table></figure><h2 id="npm-yarn"><a href="#npm-yarn" class="headerlink" title="npm\yarn"></a>npm\yarn</h2><table><thead><tr><th align="center">npm</th><th align="center">yarn</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">npm init</td><td align="center">yarn init</td><td align="center">初始化某个项目</td></tr><tr><td align="center">npm install/link</td><td align="center">yarn/ yarn install</td><td align="center">默认的安装项目所有依赖</td></tr><tr><td align="center">npm install -S pkg@version</td><td align="center">yarn add pkg@version</td><td align="center">安装某个依赖包（dependencies）</td></tr><tr><td align="center">npm uninstall -S pkg@version</td><td align="center">yarn remove pkg@version</td><td align="center">移除某个依赖包</td></tr><tr><td align="center">npm install -D pkg@version</td><td align="center">yarn add pkg@version -D</td><td align="center">安装某个开发时（devDependencies）的依赖包</td></tr><tr><td align="center">npm update -S pkg@version</td><td align="center">yarn update pkg@version</td><td align="center">更新某个依赖包</td></tr><tr><td align="center">npm install –global/-g pkg@version</td><td align="center">yarn global add pkg@version</td><td align="center">安装某个全局依赖包（整个环境）</td></tr><tr><td align="center">npm run/test xxx</td><td align="center">yarn xxx</td><td align="center">运行某个命令</td></tr><tr><td align="center">npm run serve</td><td align="center">yarn serve</td><td align="center">本地编译运行命令</td></tr><tr><td align="center">npm info pkg</td><td align="center">yarn info pkg</td><td align="center">显示某个pkg包信息</td></tr><tr><td align="center">npm list</td><td align="center">yarn list</td><td align="center">列出项目的所有依赖</td></tr><tr><td align="center">npm config</td><td align="center">yarn config</td><td align="center">管理 yarn 配置文件</td></tr><tr><td align="center">npm config list</td><td align="center">yarn config list</td><td align="center">显示当前配置</td></tr></tbody></table><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>在package.json中的两个字段：<br>dependencies：是在生产环境中运行需要的安装包<br>devDependencies：是在开发环境中需要安装的依赖包</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;npm and yarn package management common command&lt;/p&gt;
&lt;h1 id=&quot;npm和yarn命令&quot;&gt;&lt;a href=&quot;#npm和yarn命令&quot; class=&quot;headerlink&quot; title=&quot;npm和yarn命令&quot;&gt;&lt;/a&gt;np</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello Hexo</title>
    <link href="http://example.com/2020/12/04/hello-world/"/>
    <id>http://example.com/2020/12/04/hello-world/</id>
    <published>2020-12-04T01:51:06.981Z</published>
    <updated>2020-12-11T09:24:17.264Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Github Pages + Hexo 搭建个人博客</title>
    <link href="http://example.com/2020/12/04/gitpage-hexo-blog/"/>
    <id>http://example.com/2020/12/04/gitpage-hexo-blog/</id>
    <published>2020-12-04T01:51:06.981Z</published>
    <updated>2020-12-11T09:20:26.984Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://juejin.cn/post/6844904131266609165%EF%BC%9Bhttps://zhuanlan.zhihu.com/p/35668237">https://juejin.cn/post/6844904131266609165；https://zhuanlan.zhihu.com/p/35668237</a><br>github.io是每个Github账号可以免费拥有的一个域名，这个域名上部署的页面，称之为Github Pages，用户有高度自主权去DIY自己的“个人网站”。<br>通常，用户会将其用来作为自己的博客网站，存放一些博客、收藏、简历等，业界比较成熟的个人博客网站模板是Hexo，它基于Node.js，能快速生成一套可运行成博客页面的代码，用户将自己的文章加入并配置好相关信息，然后编译，推送到github.io仓库中，Github会自动将页面部署到服务器。不仅如此，Hexo上提供丰富多样的模板主题，可供选择。</p><h1 id="Github-Pages-Hexo-搭建个人博客"><a href="#Github-Pages-Hexo-搭建个人博客" class="headerlink" title="Github Pages + Hexo 搭建个人博客"></a>Github Pages + Hexo 搭建个人博客</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>git、GitHub和nodejs</p><h2 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h2><h3 id="创建Github-Pages"><a href="#创建Github-Pages" class="headerlink" title="创建Github Pages"></a>创建Github Pages</h3><p>配置好git和GitHub后，需要在GitHub上创建Github Pages服务<br><img src="github-page.png" alt="Github Page创建" title="Github Page"><br>GitHub可以配置下SSH连接公钥</p><h2 id="安装Hexo并初始化博客"><a href="#安装Hexo并初始化博客" class="headerlink" title="安装Hexo并初始化博客"></a>安装Hexo并初始化博客</h2><h3 id="安装Hexo及验证"><a href="#安装Hexo及验证" class="headerlink" title="安装Hexo及验证"></a>安装Hexo及验证</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line">$ hexo -v</span><br></pre></td></tr></table></figure><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &#123;name&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">hexo命令</th><th align="center">简写</th><th align="center">说明</th><th align="center">详述</th></tr></thead><tbody><tr><td align="center">hexo clean</td><td align="center"></td><td align="center">清除本地缓存</td><td align="center">清除public/文件夹和db.json文件</td></tr><tr><td align="center">hexo generate</td><td align="center">hexo g</td><td align="center">编译</td><td align="center">解析source的md、html文件到public，生成db.json</td></tr><tr><td align="center">hexo serve</td><td align="center">hexo s</td><td align="center">本地运行</td><td align="center">开启本地调试模式</td></tr><tr><td align="center">hexo deploy</td><td align="center">hexo d</td><td align="center">部署</td><td align="center">将本地资源部署到GithubPages</td></tr><tr><td align="center">hexo new [layout] {title}</td><td align="center"></td><td align="center">新建博客（文件夹及md文件）</td><td align="center">一般忽略layout可选参数，默认为scaffolds模板的post</td></tr><tr><td align="center">hexo help</td><td align="center"></td><td align="center">查询hexo命令</td><td align="center"></td></tr></tbody></table><h3 id="hexo-deply部署"><a href="#hexo-deply部署" class="headerlink" title="hexo deply部署"></a>hexo deply部署</h3><h4 id="安装插件hexo-deployer-git"><a href="#安装插件hexo-deployer-git" class="headerlink" title="安装插件hexo-deployer-git"></a>安装插件hexo-deployer-git</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -S hexo-deployer-git</span><br></pre></td></tr></table></figure><h4 id="config-yml中配置部署地址"><a href="#config-yml中配置部署地址" class="headerlink" title="_config.yml中配置部署地址"></a>_config.yml中配置部署地址</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:yourname/yourname.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><h4 id="运行部署命令"><a href="#运行部署命令" class="headerlink" title="运行部署命令"></a>运行部署命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h4 id="访问https-username-github-io"><a href="#访问https-username-github-io" class="headerlink" title="访问https://{username}.github.io/"></a>访问https://{username}.github.io/</h4><p>可以看到在本地生成的博客已经可以在互联网上访问到了<br>做到这步已经可以了，但是需要通过翻墙才能访问到该网址<br>可以配置我们自己的个性域名，购买一个域名，做域名的解析配置；打开github博客项目，点击settings，拉到下面Custom domain处，填上你自己的域名，保存，就能使用个性域名访问啦</p><h1 id="Hexo生成站点目录结构"><a href="#Hexo生成站点目录结构" class="headerlink" title="Hexo生成站点目录结构"></a>Hexo生成站点目录结构</h1><p><img src="hexo%E7%AB%99%E7%82%B9%E7%BB%93%E6%9E%84.png" alt="hexo站点目录结构" title="hexo站点目录结构"><br>node_modules文件夹是执行npm install或yarn install，根据package.json文件安装的依赖插件<br>public文件夹和db.json文件，是执行了hexo generate命令之后，将souce文件夹下的Markdown和HTML文件解析到了public文件夹下，并生成了db.json文件</p><h2 id="scaffolds模板"><a href="#scaffolds模板" class="headerlink" title="scaffolds模板"></a>scaffolds模板</h2><p>使用不同的模板会创建到source下不同类型文件夹下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &#123;title&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">布局</th><th align="center">路径</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">post</td><td align="center">source/_post</td><td align="center">默认</td></tr><tr><td align="center">page</td><td align="center">source/</td><td align="center"></td></tr><tr><td align="center">draft</td><td align="center">source/_draft</td><td align="center"></td></tr></tbody></table><h2 id="source资源"><a href="#source资源" class="headerlink" title="source资源"></a>source资源</h2><p>source资源文件夹，是存放用户资源的地方。<br>除post文件夹外，开头以_（下划线）命名的文件/文件夹或隐藏文件都会在generate时被忽略。Markdown和HTML文件夹会被解析到public文件夹下，其它文件格式的文件会被直接拷贝过去。<br>hexo new {title}创建博客时会在source文件夹下多一个文件夹和一个.md文件，一个用来存放你的图片等数据，另一个就是你的文章文件</p><h2 id="themes主题"><a href="#themes主题" class="headerlink" title="themes主题"></a>themes主题</h2><p>下载的主题放在themes文件夹下，hexo默认的主题是landscape</p><h2 id="config-yml配置文件"><a href="#config-yml配置文件" class="headerlink" title="_config.yml配置文件"></a>_config.yml配置文件</h2><p>_config.yml是整个博客的配置文件，至于每项配置参数可以<a href="https://hexo.io/zh-cn/docs/configuration">Hexo官网文档</a>有详细的介绍</p><h1 id="Hexo主题配置"><a href="#Hexo主题配置" class="headerlink" title="Hexo主题配置"></a>Hexo主题配置</h1><p>在themes文件夹内新增一个以theme名称命名的文件夹，<br>根目录下的_config.yml博客配置文件中的theme字段中修改成对应的theme名称即可切换主题。</p><h2 id="选择喜欢的hexo主题"><a href="#选择喜欢的hexo主题" class="headerlink" title="选择喜欢的hexo主题"></a>选择喜欢的hexo主题</h2><p>在<a href="https://hexo.io/themes/">Hexo主题网站</a>中选择喜欢的博客主题</p><h2 id="clone主题代码到themes-themeName"><a href="#clone主题代码到themes-themeName" class="headerlink" title="clone主题代码到themes/themeName"></a>clone主题代码到themes/themeName</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> root-path</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h2 id="config-yml配置修改主题名字"><a href="#config-yml配置修改主题名字" class="headerlink" title="_config.yml配置修改主题名字"></a>_config.yml配置修改主题名字</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> &#123;<span class="string">themeName</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="重新编译可以看到新的主题应用到博客"><a href="#重新编译可以看到新的主题应用到博客" class="headerlink" title="重新编译可以看到新的主题应用到博客"></a>重新编译可以看到新的主题应用到博客</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><h1 id="git除了存储生成的静态页面，还要存放hexo开发代码"><a href="#git除了存储生成的静态页面，还要存放hexo开发代码" class="headerlink" title="git除了存储生成的静态页面，还要存放hexo开发代码"></a>git除了存储生成的静态页面，还要存放hexo开发代码</h1><p>本地和发布分支<br>一个分支用来存放Hexo生成的网站原始的文件，另一个分支用来存放生成的静态网页</p><h2 id="从hexo分支下载后的代码部署方式"><a href="#从hexo分支下载后的代码部署方式" class="headerlink" title="从hexo分支下载后的代码部署方式"></a>从hexo分支下载后的代码部署方式</h2><h3 id="npm安装packge-json依赖到node-modules"><a href="#npm安装packge-json依赖到node-modules" class="headerlink" title="npm安装packge.json依赖到node_modules"></a>npm安装packge.json依赖到node_modules</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h3 id="hexo-编译"><a href="#hexo-编译" class="headerlink" title="hexo 编译"></a>hexo 编译</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><h3 id="hexo-部署到github-page域名"><a href="#hexo-部署到github-page域名" class="headerlink" title="hexo 部署到github page域名"></a>hexo 部署到github page域名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><h1 id="zhouxlt-github-io访问不了"><a href="#zhouxlt-github-io访问不了" class="headerlink" title="zhouxlt.github.io访问不了"></a>zhouxlt.github.io访问不了</h1><h2 id="ping域名，看到了ip"><a href="#ping域名，看到了ip" class="headerlink" title="ping域名，看到了ip"></a>ping域名，看到了ip</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ping zhouxlt.github.io</span><br></pre></td></tr></table></figure><p><img src="ping%E5%9F%9F%E5%90%8D%E7%BB%93%E6%9E%9C%E5%9B%BE.png" alt="ping zhouxlt.github.io结果图" title="ping域名"></p><h2 id="以太网Internet4协议配置"><a href="#以太网Internet4协议配置" class="headerlink" title="以太网Internet4协议配置"></a>以太网Internet4协议配置</h2><p><img src="%E4%BB%A5%E5%A4%AA%E7%BD%91%E9%85%8D%E7%BD%AEInternet4DNS%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="配置DNS服务器" title="配置DNS服务器"></p><h2 id="监测网络中DNS服务器是否能正确实现域名解析"><a href="#监测网络中DNS服务器是否能正确实现域名解析" class="headerlink" title="监测网络中DNS服务器是否能正确实现域名解析"></a>监测网络中DNS服务器是否能正确实现域名解析</h2><p><img src="%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.png" alt="监测域名解析" title="监测域名解析"></p><h2 id="刷新DNS缓存"><a href="#刷新DNS缓存" class="headerlink" title="刷新DNS缓存"></a>刷新DNS缓存</h2><p><img src="%E5%88%B7%E6%96%B0DNS%E7%BC%93%E5%AD%98.png" alt="刷新DNS缓存" title="刷新DNS缓存"></p><h2 id="翻墙！！"><a href="#翻墙！！" class="headerlink" title="翻墙！！"></a>翻墙！！</h2><p>一顿操作~~~结果是因为要翻墙~~~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考：&lt;a href=&quot;https://juejin.cn/post/6844904131266609165%EF%BC%9Bhttps://zhuanlan.zhihu.com/p/35668237&quot;&gt;https://juejin.cn/post/684490413126</summary>
      
    
    
    
    
  </entry>
  
</feed>
